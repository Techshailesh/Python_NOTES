#####Python Certified Entry Level Programmer###########
Python version 3
Anaconda/Pycharm is Python interpreter and notebook for python codes.


Source Code: human readable (programe what we write)
Machine code: only machine can interpret (machine which coverts our source code in machine reading format)


Source code ---->Machine code
(compilation)       (interpretation)

##Difference:

Compliation                                                      Interpretation
-complile source code only once.                   -interpret source code every time you run code(programs)
- Needs the intrepreter to run , PYTHON is intrepreter based language
##Python interpreter behaviour:

1) reads code from top to bottom.
2) throws error based on checking :
a) lexis (keywords , if we use special python standard keywords as variable, it will throw error)
b)syntax
c)semantics

####Print using double quotes #######

print("I'm learning Python developer! \nI'm  loving it!")              ## \n is used for new line


I'm learning Python developer!
I'm  loving it!

==print using single quotes:  ===

print('I\'m learning Python! \nI am loving it !!!!!!')

I'm learning Python!
I am loving it !!!!!!

=== wrong print spelling ====

prin("hi")    ## always make sure to type print , otherwise it will throw error

NameError: name 'prin' is not defined. Did you mean: 'print'?

Process finished with exit code 1


====printing two stings ======


print("I'm learning Python","I'm loving it! horraaaayyy#")   #### in same line
print("I'm learning Python developer!\n""I'm loving it! horraaaayyy#")    #### in different line


********* Variables ****************

Python has no command for declaring a variable. A variable is created the moment you first assign a value to it.
Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory


greeting="Welcome to Python."     #####string
print("Hi User!!!!!!",greeting,"\nHope you are enjoying!!!!!")

greeting=4555  ###integer
print (greeting)


## note that variable should be first defined , then print . Reverse will give error , as below

print(greeting)
note="greeting"

NameError: name 'greeting' is not defined

Process finished with exit code 1



## it will always take the latest value as input , as below:


note="greeting"
print(note)

note=("hi")
print(note)


greeting
hi

--NOTE: from cannot be used as variable for value

from=(10)
print(from)

The above code is wrong , as from will not be accepted.


******** DATA TYPES. ***********************

age=35  ######integer data type

age=35.5   ######float data type
age=35.0   #####float data type


name="shailesh, how are you"       ##string

Bollean Values:

True, False

am_i_young= False
am_i_young=True

## Octal numbers: start with 0O (zero small alphabet o) or 0O(zero capital alphabet O).  Example-->>  print(0o123)
## Hexadecimal numbers:  starts with 0X or 0x     Example--> print(0x123)
## Underscore in number   -- >>      120003000 is same as.  12_000_30_000   (it is just used to make in readble format)
## Scientific notation.
5e^-4 ---->5*1/10000--->> .00005


----->>>>>>OPERTAORS in PYTHON<<<<<<---------

a=5
b=2
c=5

print(a+b)  ---  addition
print(a-b)  ---subtract
print(a*b) ---multiply
print(a/b) --- division.        ---output will always be in float value, see below examples   ----
Example:     a/b=2.5
a/c=1.0

print(a//b) ---integer division          ---always gives result in integer, as below example
Example:    a/b=2
a/c=1


print(a%b). ---remainder (modulous) division.   -----this always gives remainder as output
Example:   a/b=1

print(a**b) ---exponential multiplication------to the power value (like square ,cube)
Example: a**b = (5)2= 5*5=25
b**c=(2)5=2*2*2*2*2=32

When we have 3 values like ,

print(3**2**4)
it will work as :

3**2^4( which will be 16 (2*2*2*2)
3**16 (3*3*3*........(likewise 16 times)
So final output is :  43046721





####Reassigning Values##########


age=7
print(age+5)

age=7
age +=7       (shortcut for age=age+7)
print(age)

print('hi'+'hello')          --Concatenate two strings
hihello

print('23'+'5')              ---Concatenate two numbers
235

print('hi'*2)              ---Multiply in string
hihi


############### Input function ################

The input() method takes input from the user and returns it.

data=input('Enter your current city_name:')
print("Welcome to ", data)
print("Hope you are doing great in ", data)

#it will prompt for input as below and give output based on print
Enter your current city_name:London
Welcome to  London
Hope you are doing great in  London


########Casting in python #############

It is basically conveting the data type to antother data type , like

float() --> int()
int()--->float()
str()---this is rarely used

Integers:

x = int(1)   # x will be 1
y = int(2.8) # y will be 2
z = int("3") # z will be 3

Float:

x = float(1)     # x will be 1.0
y = float(2.8)   # y will be 2.8
z = float("3")   # z will be 3.0
w = float("4.2") # w will be 4.2

strings:

x = str("s1") # x will be 's1'
y = str(2)    # y will be '2'
z = str(3.0)  # z will be '3.0'


## Seperate parameter (sep)

The separator between the arguments to print() function in Python is space by default (softspace feature) , which can be modified and can be made to any character, integer or string as per our choice.
The ‘sep’ parameter is used to achieve the same, it is found only in python 3.x or later. It is also used for formatting the output strings.

#for formatting a date
print('09','12','2016', sep='-')

09-12-2016

#another example
print('shailesh','learning python', sep='@')

shailesh@learning python



## END FUNCTION ######

Python’s print() function comes with a parameter called ‘end’. By default, the value of this parameter is ‘\n’, i.e. the new line character.


Without END:

colors = ['red', 'yellow', 'orange']
for color in colors:
    if color != 'yellow':
        print(color)

output:

red
orange


NOw lets see using END:

colors = ['red', 'yellow', 'orange']
for color in colors:
    if color != 'yellow':
        print(color, end="-")

output:   (now output is in single row , with - in between all values )

red-orange-







##### If-else, elif  #####

age=int(input('enter user age:'))
if age > 50:
print("User is young and not old")
else:
print("User is bachelor!!!")


age=int(input('enter user age:'))
if age > 50:
print("User is old")
elif age == 30:
print("user should be professional")
else:
print("User is bachelor!!!")


## Comparison Operators:

== (double equal)  ---> means equal to ---> x==2
!=                          ----> not equal          ----> x!=2
<      less then
>      greater then
>=    greater then equal to
<=    less then euql to



### Logical operators:

1)not    ----1st priority
2)and    ----2nd highet priority
3)or     -- 3rd highest property

**Order of evaluation of logical operators: - In the case of multiple operators, Python always evaluates the expression from left to right.

### Python Loops ###

While loop---  it is used to repeat over block of code as long as the condition is true. ( code logic tab tak chalega , jab tak required condition satisfy na ho jaye).

##for loops ---


The for loop in Python is used to iterate over a "sequence" (list, tuple, string) or other iterable objects. Iterating over a sequence is called "traversal".
in short , this is easy way of coding as compare to while loop.

RANGE function:  very imp and useful function that creates a sequence of numbers, for example see below:

for i in range(1,6):      ---(range function here will follow sequence from 1 to 5 (n-1 of last digit)
print(i)
print('done')

** this will print values from 1 to 5

1
2
3
4
5
done
---------------------------------------------------------


for i in range(6):
print(i)
print('done')

same as above , default it takes 0 to start as counter

1
2
3
4
5
done




#### Break and continue. ########

####BREAK:

In Python, break and continue statements can alter the flow of a normal loop.

The break statement terminates the loop containing it. Control of the program flows to the statement immediately after the body of the loop.

If the break statement is inside a nested loop (loop inside another loop), the break statement will terminate the innermost loop.


# Use of break statement inside the loop

for val in "string":
    if val == "i":
        break
    print(val)

print("No more further iteration, because BREAK function has discontinued the loop")

Output:  ( Jaise hee condition staisfy hua ,break statement pe aya. Next loop pe jayega hi nahi , sidhe loop body ke bahar jo hoga wo print karega )

s
t
r
No more further iteration, because BREAK function has discontinued the loop





***Continue:
 Loop does not terminate but continues on with the next iteration. Lets see below examples :

Example1:

counter = 0
while counter < 8:
	counter += 1
	if counter % 2 == 0:
		continue
	print("hello")

output:

hello   #(for iteration 1)
hello   #(for iteration 3)
hello   #(for iteraion 5)
hello   #(for iteration 7)

Example 2:

  counter = 0
while counter < 8:
	counter += 2
	if counter % 2 == 0:
		continue
	print("hello")


Output: it will not give any output , so it will print zero times . conter
